name: Release

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                include:
                    - os: linux
                      arch: amd64
                      ext: ""
                    - os: linux
                      arch: arm64
                      ext: ""
                    - os: darwin
                      arch: amd64
                      ext: ""
                    - os: darwin
                      arch: arm64
                      ext: ""
                    - os: windows
                      arch: amd64
                      ext: ".exe"
                    - os: windows
                      arch: arm64
                      ext: ".exe"

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.21"

            - name: Build
              env:
                  GOOS: ${{ matrix.os }}
                  GOARCH: ${{ matrix.arch }}
                  CGO_ENABLED: 0
              run: |
                  go build -ldflags="-s -w -X main.version=${GITHUB_REF_NAME}" -o git-mini-commit${{ matrix.ext }} .

            - name: Upload artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: git-mini-commit-${{ matrix.os }}-${{ matrix.arch }}
                  path: git-mini-commit${{ matrix.ext }}

    release:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v3

            - name: Create checksums
              run: |
                  for file in git-mini-commit-*/git-mini-commit*; do
                    sha256sum "$file" > "$file.sha256"
                  done

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      git-mini-commit-*/git-mini-commit*
                      git-mini-commit-*/git-mini-commit*.sha256
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    npm:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Download artifacts
              uses: actions/download-artifact@v3

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "18"
                  registry-url: "https://registry.npmjs.org"

            - name: Create npm package
              run: |
                  mkdir -p npm-package/bin
                  cp git-mini-commit-linux-amd64/git-mini-commit npm-package/bin/
                  cp git-mini-commit-darwin-amd64/git-mini-commit npm-package/bin/git-mini-commit-macos
                  cp git-mini-commit-darwin-arm64/git-mini-commit npm-package/bin/git-mini-commit-macos-arm64
                  cp git-mini-commit-windows-amd64/git-mini-commit.exe npm-package/bin/git-mini-commit.exe
                  cp git-mini-commit-windows-arm64/git-mini-commit.exe npm-package/bin/git-mini-commit-arm64.exe

                  # Create package.json
                  cat > npm-package/package.json << EOF
                  {
                    "name": "git-mini-commit",
                    "version": "${GITHUB_REF_NAME#v}",
                    "description": "Git CLI extension for mini-commit workflow",
                    "main": "bin/git-mini-commit",
                    "bin": {
                      "git-mini-commit": "bin/git-mini-commit"
                    },
                    "scripts": {
                      "postinstall": "node install.js"
                    },
                    "files": [
                      "bin/",
                      "install.js"
                    ],
                    "keywords": ["git", "cli", "commit", "workflow"],
                    "author": "Minoru Kinugasa",
                    "license": "MIT",
                    "repository": {
                      "type": "git",
                      "url": "https://github.com/minoru-kinugasa-105/git-mini-commit.git"
                    },
                    "homepage": "https://github.com/minoru-kinugasa-105/git-mini-commit#readme"
                  }
                  EOF

                  # Create install script
                  cat > npm-package/install.js << 'EOF'
                  const fs = require('fs');
                  const path = require('path');
                  const os = require('os');

                  const platform = os.platform();
                  const arch = os.arch();

                  let binaryName = 'git-mini-commit';
                  if (platform === 'win32') {
                    binaryName = arch === 'arm64' ? 'git-mini-commit-arm64.exe' : 'git-mini-commit.exe';
                  } else if (platform === 'darwin') {
                    binaryName = arch === 'arm64' ? 'git-mini-commit-macos-arm64' : 'git-mini-commit-macos';
                  }

                  const sourcePath = path.join(__dirname, 'bin', binaryName);
                  const targetPath = path.join(__dirname, 'bin', 'git-mini-commit' + (platform === 'win32' ? '.exe' : ''));

                  if (fs.existsSync(sourcePath)) {
                    fs.copyFileSync(sourcePath, targetPath);
                    fs.chmodSync(targetPath, '755');
                  }
                  EOF

            - name: Publish to npm
              run: |
                  cd npm-package
                  npm publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
